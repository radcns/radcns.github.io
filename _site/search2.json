[
  
    {
      "title"    : "GraphQL 개념잡기",
      "category" : "",
      "tags"     : "graphql",
      "url"      : "/2019/08/01/graphql-basic/",
      "date"     : "2019-08-01 12:00:00 +0900",
      "content"   : "<p>GraphQL은 페이스북에서 만든 쿼리 언어입니다. GrpahQL은 요즘 개발자들 사이에서 자주 입에 오르내리고 있으나, 2019년 7월 기준으로 얼리스테이지(early-stage)임은 분명합니다. 국내에서 GraphQL API를 Open API로 공개한 곳은 드뭅니다. 또한, 해외의 경우, Github 사례(<a href=\"https://developer.github.com/v4/\">Github v4 GraphQL</a>)를 찾을 수는 있지만, 전반적으로 GraphQL API를 Open API로 공개한 곳은 많지 않습니다. 하지만 등장한지 얼마되지 않았음에도 불구하고, GraphQL의 인기는 매우 가파르게 올라가고 있다는 사실을 확인 할 수 있습니다.</p>\n\n<p><img src=\"/files/graphql-popularity.png\" alt=\"상승중인 GraphQL 인기 (출처: https://2018.stateofjs.com/data-layer/graphql/)\" /></p>\n\n<h2 id=\"graphql-이란\">GraphQL 이란?</h2>\n\n<p>Graph QL(이하 gql)은 Structed Query Language(이하 sql)와 마찬가지로 쿼리 언어입니다. 하지만 gql과 sql의 언어적 구조 차이는 매우 큽니다. 또한 gql과 sql이 실전에서 쓰이는 방식의 차이도 매우 큽니다. gql과 sql의 언어적 구조 차이가 활용 측면에서의 차이를 가져왔습니다. 이 둘은 애초에 탄생 시기도 다르고 배경도 다릅니다. sql은 <strong>데이터베이스 시스템</strong>에 저장된 데이터를 효율적으로 가져오는 것이 목적이고, gql은 <strong>웹 클라이언트</strong>가 데이터를 서버로 부터 효율적으로 가져오는 것이 목적입니다. sql의 문장(statement)은 주로 백앤드 시스템에서 작성하고 호출 하는 반면, gql의 문장은 주로 클라이언트 시스템에서 작성하고 호출 합니다.</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span> <span class=\"n\">plot_id</span><span class=\"p\">,</span> <span class=\"n\">species_id</span><span class=\"p\">,</span> <span class=\"n\">sex</span><span class=\"p\">,</span> <span class=\"n\">weight</span><span class=\"p\">,</span> <span class=\"n\">ROUND</span><span class=\"p\">(</span><span class=\"n\">weight</span> <span class=\"o\">/</span> <span class=\"mi\">1000</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"k\">FROM</span> <span class=\"n\">surveys</span><span class=\"p\">;</span>\n</code></pre></div></div>\n<p><em>sql 쿼리 예시</em></p>\n\n<div class=\"language-graphql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"n\">hero</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"n\">name</span><span class=\"w\">\n    </span><span class=\"n\">friends</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"n\">name</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n<p><em>gql 쿼리 예시</em></p>\n\n<p>서버사이드 gql 어플리케이션은 gql로 작성된 쿼리를 입력으로 받아 쿼리를 처리한 결과를 다시 클라이언트로 돌려줍니다. HTTP API 자체가 특정 데이터베이스나 플렛폼에 종속적이지 않은것 처럼 마찬가지로 gql 역시 어떠한 특정 데이터베이스나 플렛폼에 종속적이지 않습니다. 심지어 네트워크 방식에도 종속적이지 않습니다. 일반적으로 gql의 인터페이스간 송수신은 네트워크 레이어 L7의 HTTP POST 메서드와 웹소켓 프로토콜을 활용합니다. 필요에 따라서는 얼마든지 L4의 TCP/UDP를 활용하거나 심지어 L2 형식의 이더넷 프레임을 활용 할 수도 있습니다.</p>\n\n<p><img src=\"/files/graphql-pipeline.png\" alt=\"GraphQL 파이프라인\" /></p>\n\n<h2 id=\"rest-api와-비교\">REST API와 비교</h2>\n\n<p>REST API는 URL, METHOD등을 조합하기 때문에 다양한 Endpoint가 존재 합니다. 반면, gql은 단 하나의 Endpoint가 존재 합니다. 또한, gql API에서는 불러오는 데이터의 종류를 쿼리 조합을 통해서 결정 합니다.\n예를 들면, REST API에서는 각 Endpoint마다 데이터베이스 SQL 쿼리가 달라지는 반면, gql API는 gql 스키마의 타입마다 데이터베이스 SQL 쿼리가 달라집니다.</p>\n\n<p><img src=\"/files/graphql-stack.png\" alt=\"HTTP와 gql의 기술 스택 비교\" /></p>\n\n<p><img src=\"/files/graphql-mobile-api.png\" alt=\"REST API와 GraphQL API의 사용 (출처 : https://blog.apollographql.com/graphql-vs-rest-5d425123e34b)\" /></p>\n\n<p>위 그림처럼, gql API를 사용하면 여러번 네트워크 호출을 할 필요 없이, 한번의 네트워크 호출로 처리 할 수 있습니다.</p>\n\n<h2 id=\"graphql의-구조\">GraphQL의 구조</h2>\n\n<h3 id=\"쿼리뮤테이션querymutation\">쿼리/뮤테이션(query/mutation)</h3>\n<p>쿼리와 뮤테이션 그리고 응답 내용의 구조는 상당히 직관적 입니다. 요청하는 쿼리문의 구조와 응답 내용의 구조는 거의 일치 합니다.\n<img src=\"/files/graphql-example.png\" alt=\"GraphQL 쿼리문(좌측)과 응답 데이터 형식(우측)\" /></p>\n\n<p>gql에서는 굳이 쿼리와 뮤테이션을 나누는데 내부적으로 들어가면 사실상 이 둘은 별 차이가 없습니다. 쿼리는 데이터를 읽는데(R) 사용하고, 뮤테이션은 데이터를 변조(CUD) 하는데 사용한다는 개념 적인 규약을 정해 놓은 것 뿐입니다.</p>\n\n<div class=\"language-graphql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"n\">human</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"1000\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"n\">name</span><span class=\"w\">\n    </span><span class=\"n\">height</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n\n</span><span class=\"k\">query</span><span class=\"w\"> </span><span class=\"n\">HeroNameAndFriends</span><span class=\"p\">(</span><span class=\"nv\">$episode</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">Episode</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"n\">hero</span><span class=\"p\">(</span><span class=\"n\">episode</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nv\">$episode</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"n\">name</span><span class=\"w\">\n    </span><span class=\"n\">friends</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"n\">name</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>제가 처음 gql을 접했을때 일반 쿼리와 오퍼레이션 네임 쿼리의 구분이 어려웠습니다. 하나 는 앞에 query가 붙어있고, 다른 하나는 처음 시작이 중괄호(‘{‘) 문자가 붙어있습니다. 이것을 이해하는데에는 오퍼레이션 네임과 변수의 쓰임새를 살펴보는 것이 도움이 됩니다. 일반적인 경우 클라이언트에서 static한 쿼리문을 작성하지는 않을 것입니다. 주로 정보를 불러올때 id 값이나, 다른 <strong>인자</strong> 값을 가지고 데이터를 불러 올 것입니다. gql에는 쿼리에 변수라는 개념이 있는데, 이 개념은 이러한 용처를 위해 존재 하는것 입니다. gql을 구현한 클라이언트에서는 이 변수에 프로그래밍으로 값을 할당 할 수 있는 함수 인터페이스가 존재합니다. react apollo client의 경우에는 variables 라는 파라메터에 원하는 값을 넣어주면 됩니다.</p>\n\n<div class=\"language-graphql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">query</span><span class=\"w\"> </span><span class=\"n\">getStudentInfomation</span><span class=\"p\">(</span><span class=\"nv\">$studentId</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">ID</span><span class=\"p\">){</span><span class=\"w\">\n  </span><span class=\"n\">personalInfo</span><span class=\"p\">(</span><span class=\"n\">studentId</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nv\">$studentId</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"n\">name</span><span class=\"w\">\n    </span><span class=\"n\">address1</span><span class=\"w\">\n    </span><span class=\"n\">address2</span><span class=\"w\">\n    </span><span class=\"n\">major</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"n\">classInfo</span><span class=\"p\">(</span><span class=\"n\">year</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">2018</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">studentId</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nv\">$studentId</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"n\">classCode</span><span class=\"w\">\n    </span><span class=\"n\">className</span><span class=\"w\">\n    </span><span class=\"n\">teacher</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"n\">name</span><span class=\"w\">\n      </span><span class=\"n\">major</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n    </span><span class=\"n\">classRoom</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"n\">id</span><span class=\"w\">\n      </span><span class=\"n\">maintainer</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"n\">name</span><span class=\"w\">\n      </span><span class=\"p\">}</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"n\">SATInfo</span><span class=\"p\">(</span><span class=\"n\">schoolCode</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"err\">0</span><span class=\"mi\">412</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">studentId</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nv\">$studentId</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"n\">totalScore</span><span class=\"w\">\n    </span><span class=\"n\">dueDate</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p><strong>오퍼레이션</strong> 네임 쿼리는 매우 편리 합니다. 굳이 비유하자면 쿼리용 함수 입니다. 데이터베이스 에서의 프로시져(procedure) 개념과 유사하다고 생각하면 됩니다. 이 개념 덕분에 여러분은 REST API를 호출할때와 다르게, 한번의 인터넷 네트워크 왕복으로 여러분이 원하는 모든 데이터를 가져 올 수 있습니다. 데이터베이스의 프로시져는 DBA 혹은 백앤드프로그래머가 작성하고 관리 하였지만, gql 오퍼레이션 네임 쿼리는 클라이언트 프로그래머가 작성하고 관리 합니다.</p>\n\n<p>gql이 제공하는 추가 기능 덕분에 백엔드 프로그래머와 프론트엔드 프로그래머의 협업 방식 에도 영향을 줍니다. 이전 협업 방식(REST API)에서는 프론트앤드 프로그래머는 백앤드 프로그래머가 작성하여 전달하는 API의 request / response의 형식에 의존하게 됩니다. 그러나, gql을 사용한 방식에 서는 이러한 의존도가 많이 사라집니다. 다만 여전히 데이터 schema에 대한 협업 의존성은 존재합니다.</p>\n\n<h3 id=\"스키마타입schematype\">스키마/타입(schema/type)</h3>\n\n<p>데이터베이스 스키마(schema)를 작성할 때의 경험을 SQL 쿼리 작성으로 비유한다면, gql 스키마를 작성할 때의 경험은 C, C++의 헤더파일 작성에 비유가 됩니다. 그러므로, 프로그래밍언어(C, C++, JAVA등)에 익숙한 프로그래머라면 스키마 정의 또한 쉽게 배우실 것입니다.</p>\n\n<h4 id=\"오브젝트-타입과-필드\">오브젝트 타입과 필드</h4>\n\n<div class=\"language-graphql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"n\">Character</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">!</span><span class=\"w\">\n  </span><span class=\"n\">appearsIn</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Episode</span><span class=\"p\">!]!</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n<ul>\n  <li>오브젝트 타입 : Character</li>\n  <li>필드 : name, appearsIn</li>\n  <li>스칼라 타입 : String, ID, Int 등</li>\n  <li>느낌표(!) : 필수 값을 의미(non-nullable)</li>\n  <li>대괄호([, ]) : 배열을 의미(array)</li>\n</ul>\n\n<h3 id=\"리졸버resolver\">리졸버(resolver)</h3>\n\n<p>데이터베이스 사용시, 데이터를 가져오기 위해서 sql을 작성 했습니다. 또한, 데이터베이스에는 데이터베이스 어플리케이션을 사용하여 데이터를 가져오는 구체적인 과정이 구현 되어 있습니다. 그러나 gql 에서는 데이터를 가져오는 구체적인 과정을 직접 구현 해야 합니다. gql 쿼리문 파싱은 대부분의 gql 라이브러리에서 처리를 하지만, gql에서 데이터를 가져오는 구체적인 과정은 resolver(이하 리졸버)가 담당하고, 이를 직접 구현 해야 합니다. 프로그래머는 리졸버를 직접 구현해야하는 부담은 있지만, 이를 통해서 데이터 source의 종류에 상관 없이 구현이 가능 합니다. 예를 들어서, 리졸버를 통해 데이터를 데이터베이스에서 가져 올 수 있고, 일반 파일에서 가져 올 수 있고, 심지어 http, SOAP와 같은 네트워크 프로토콜을 활용해서 원격 데이터를 가져올 수 있 습니다. 덧붙이면, 이러한 특성을 이용하면 legacy 시스템을 gql 기반으로 바꾸는데 활용 할 수 있습니다.</p>\n\n<p>gql 쿼리에서는 각각의 필드마다 함수가 하나씩 존재 한다고 생각하면 됩니다. 이 함수는 다음 타입을 반환합니다.  이러한 각각의 함수를 리졸버(resolver)라고 합니다. 만약 필드가 스칼라 값(문자열이나 숫자와 같은 primitive 타입)인 경우에는 실행이 종료됩니다. 즉 더 이상의 연쇄적인 리졸버 호출이 일어나지 않습니다. 하지만 필드의 타입이 스칼라 타입이 아닌 우리가 정의한 타입이라면 해당 타입의 리졸버를 호출되게 됩니다.</p>\n\n<p>이러한 연쇄적 리졸버 호출은 DFS(Depth First Search)로 구현 되어있을것으로 추측합니다. 이점이 바로 gql이 Graph라는 단어를 쓴 이유가 아닐까 생각합니다. 연쇄 리졸버 호출은 여러모로 장점이 있습니다. 연쇄 리졸버 특성을 잘 활용하면 DBMS의 관계에 대한 쿼리를 매우 쉽고, 효율적으로 처리 할 수 있습니다. 예를들어 gql의 query에서 어떤 타입의 필드 중 하나가 해당 타입과 1:n의 관계를 맺고 있다고 가정해보겠습니다.</p>\n\n<div class=\"language-graphql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"n\">Query</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"n\">users</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">User</span><span class=\"p\">]</span><span class=\"w\">\n  </span><span class=\"n\">user</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">ID</span><span class=\"p\">):</span><span class=\"w\"> </span><span class=\"n\">User</span><span class=\"w\">\n  </span><span class=\"n\">limits</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Limit</span><span class=\"p\">]</span><span class=\"w\">\n  </span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"n\">UserId</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">ID</span><span class=\"p\">):</span><span class=\"w\"> </span><span class=\"n\">Limit</span><span class=\"w\">\n  </span><span class=\"n\">paymentsByUser</span><span class=\"p\">(</span><span class=\"n\">userId</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">ID</span><span class=\"p\">):</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Payment</span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n\n</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"n\">User</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n\t</span><span class=\"n\">id</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">ID</span><span class=\"p\">!</span><span class=\"w\">\n\t</span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">!</span><span class=\"w\">\n\t</span><span class=\"n\">sex</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">SEX</span><span class=\"p\">!</span><span class=\"w\">\n\t</span><span class=\"n\">birthDay</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">!</span><span class=\"w\">\n\t</span><span class=\"n\">phoneNumber</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">!</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n\n</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"n\">Limit</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n\t</span><span class=\"n\">id</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">ID</span><span class=\"p\">!</span><span class=\"w\">\n\t</span><span class=\"n\">UserId</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">ID</span><span class=\"w\">\n\t</span><span class=\"n\">max</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Int</span><span class=\"p\">!</span><span class=\"w\">\n\t</span><span class=\"n\">amount</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Int</span><span class=\"w\">\n\t</span><span class=\"n\">user</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">User</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n\n</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"n\">Payment</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n\t</span><span class=\"n\">id</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">ID</span><span class=\"p\">!</span><span class=\"w\">\n\t</span><span class=\"n\">limit</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">Limit</span><span class=\"p\">!</span><span class=\"w\">\n\t</span><span class=\"n\">user</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">User</span><span class=\"p\">!</span><span class=\"w\">\n\t</span><span class=\"n\">pg</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">PaymentGateway</span><span class=\"p\">!</span><span class=\"w\">\n\t</span><span class=\"n\">productName</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">!</span><span class=\"w\">\n\t</span><span class=\"n\">amount</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Int</span><span class=\"p\">!</span><span class=\"w\">\n\t</span><span class=\"n\">ref</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\">\n\t</span><span class=\"n\">createdAt</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">!</span><span class=\"w\">\n\t</span><span class=\"n\">updatedAt</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">!</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>여기에서는 User와 Limit는 1:1의 관계이고 User와 Payment는 1:n의 관계입니다.</p>\n\n<div class=\"language-graphql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"n\">paymentsByUser</span><span class=\"p\">(</span><span class=\"n\">userId</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"n\">id</span><span class=\"w\">\n    </span><span class=\"n\">amount</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<div class=\"language-graphql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"n\">paymentsByUser</span><span class=\"p\">(</span><span class=\"n\">userId</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"n\">id</span><span class=\"w\">\n    </span><span class=\"n\">amount</span><span class=\"w\">\n    </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"n\">name</span><span class=\"w\">\n      </span><span class=\"n\">phoneNumber</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>위 두 쿼리는 동일한 쿼리명을 가지고 있지만, 호출 되는 리졸버 함수의 갯수는 아래가 더 많습니다. 각각의 리졸버 함수에는 내부적으로 데이터베이스 쿼리가 존재합니다. 이 말인즉, 쿼리에 맞게 필요한 만큼만 최적화하여 호출 할 수 있다는 의미입니다. 내부적으로 로직 설계를 어떻게 하느냐에 따라서 달라 질 수 있겠지만, 이러한 재귀형의 리졸버 체인을 잘 활용 한다면, 효율적인 설계가 가능 합니다. (기존에 REST API 시대에는 정해진 쿼리는 무조건 전부 호출이 되었습니다.)</p>\n\n<p>리졸버 함수는 다음과 같이 총 4개의 인자를 받습니다.</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"nx\">Query</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nl\">paymentsByUser</span><span class=\"p\">:</span> <span class=\"k\">async</span> <span class=\"p\">(</span><span class=\"nx\">parent</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">userId</span> <span class=\"p\">},</span> <span class=\"nx\">context</span><span class=\"p\">,</span> <span class=\"nx\">info</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">limit</span> <span class=\"o\">=</span> <span class=\"kr\">await</span> <span class=\"nx\">Limit</span><span class=\"p\">.</span><span class=\"nx\">findOne</span><span class=\"p\">({</span> <span class=\"na\">where</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">UserId</span><span class=\"p\">:</span> <span class=\"nx\">userId</span> <span class=\"p\">}</span> <span class=\"p\">})</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">payments</span> <span class=\"o\">=</span> <span class=\"kr\">await</span> <span class=\"nx\">Payment</span><span class=\"p\">.</span><span class=\"nx\">findAll</span><span class=\"p\">({</span> <span class=\"na\">where</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">LimitId</span><span class=\"p\">:</span> <span class=\"nx\">limit</span><span class=\"p\">.</span><span class=\"nx\">id</span> <span class=\"p\">}</span> <span class=\"p\">})</span>\n        <span class=\"k\">return</span> <span class=\"nx\">payments</span>        \n    <span class=\"p\">},</span>  \n  <span class=\"p\">},</span>\n  <span class=\"na\">Payment</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">limit</span><span class=\"p\">:</span> <span class=\"k\">async</span> <span class=\"p\">(</span><span class=\"nx\">payment</span><span class=\"p\">,</span> <span class=\"nx\">args</span><span class=\"p\">,</span> <span class=\"nx\">context</span><span class=\"p\">,</span> <span class=\"nx\">info</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"kr\">await</span> <span class=\"nx\">Limit</span><span class=\"p\">.</span><span class=\"nx\">findOne</span><span class=\"p\">({</span> <span class=\"na\">where</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"nx\">payment</span><span class=\"p\">.</span><span class=\"nx\">LimitId</span> <span class=\"p\">}</span> <span class=\"p\">})</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<ul>\n  <li>첫번째 인자는 parent로 연쇄적 리졸버 호출에서 부모 리졸버가 리턴한 객체입니다. 이 객체를 활용해서 현재 리졸버가 내보낼 값을 조절 할 수 있습니다.</li>\n  <li>두번째 인자는 args로 쿼리에서 입력으로 넣은 인자입니다.</li>\n  <li>세번째 인자는 context로 모든 리졸버에게 전달이 됩니다. 주로 미들웨어를 통해 입력된 값들이 들어 있습니다. 로그인 정보 혹은 권한과 같이 주요 컨텍스트 관련 정보를 가지고 있습니다.</li>\n  <li>네번째 인자는 info로 스키마 정보와 더불어 현재 쿼리의 특정 필드 정보를 가지고 있습니다. 잘 사용하지 않는 필드입니다.</li>\n</ul>\n\n<h3 id=\"인트로스펙션introspection\">인트로스펙션(introspection)</h3>\n\n<p>기존 서버-클라이언트 협업 방식에서는 연동규격서라고 하는 API 명세서를 주고 받는 절차가 반드시 필요 했습니다. 프로젝트 관리 측면에서 관리해야 할 대상의 증가는 작업의 복잡성 및 효율성 저해를 의미합니다. 이 API 명세서는 때때로 관리가 제대로 되지 않아, 인터페이스 변경 사항을 제때 문서에 반영하지 못하기도 하고, 제 타이밍에 전달 못하곤 합니다.</p>\n\n<p>이러한 REST의 API 명세서 공유와 같은 문제를 해결하는 것이 gql의 인트로스펙션 기능 입니다. gql의 인트로스펙션은 서버 자체에서 현재 서버에 정의된 스키마의 실시간 정보를 공유를 할 수 있게 합니다. 이 스키마 정보만 알고 있으면 클라이언트 사이드에서는 따로 연동규격서를 요청 할 필요가 없게 됩니다. 클라이언트 사이드에서는 실시간으로 현재 서버에서 정의하고 있는 스키마를 의심 할 필요 없이 받아들이고, 그에 맞게 쿼리문을 작성하면 됩니다.</p>\n\n<p>이러한 인트로스펙션용 쿼리가 따로 존재합니다. 일반 gql 쿼리문을 작성하듯이 작성하면 됩니다. 다만 실제로는 굳이 스키마 인트로스펙션을 위해 gql 쿼리문을 작성할 필요가 없습니다. 대부분의 서버용 gql 라이브러리에는 쿼리용 IDE를 제공합니다. 다음 화면은 apollo server라는 서버용 gql 라이브러리에 포함 되어있는 웹 IDE 화면입니다.</p>\n\n<p><img src=\"/files/graphql-apollo-ide.png\" alt=\"아폴로 서버에서 제공하는 gql IDE\" /></p>\n\n<p>위의 화면을 참고하면, 프로그래머는 인트로스펙션을 활용하여, 직접 쿼리 및 뮤테이션, 필드 스키마를 확인 할 수 있습니다. 물론 보안상의 이슈로 상용환경에서는 이러한 스키마의 공개는 신중해야 합니다. 대부분의 라이브러리는 해당기능을 켜고 끄게 하는 옵션이 존재합니다.</p>\n\n<h3 id=\"graphql을-활용-할-수-있게-도와주는-다양한-라이브러리들\">GraphQL을 활용 할 수 있게 도와주는 다양한 라이브러리들</h3>\n\n<p>gql 자체는 쿼리 언어입니다. 이것 만으로는 할 수 있는 것이 없습니다. gql을 실제 구체적으로 활용 할 수 있도록 도와주는 라이브러리들이 몇가지 존재 합니다. gql 자체는 개발 언어와 사용 네트워크에 완전히 독립적입니다. 이를 어떻게 활용 할지는 여러분에게 달려 있습니다.</p>\n\n<p>대표적인 gql 라이브러리 셋에 대한 링크는 2개를 소개합니다. 릴레이는 GraphQL의 어머니인 Facebook이 만들었습니다. 하지만 개인적인 의견으로는 현재(2019년 7월)버전의 릴레이는 사용하기 매우 번거롭게 디자인 되어 있다고 생각합니다. 개인적으로는 아폴로가 사용하기 편했습니다.</p>\n\n<ul>\n  <li><a href=\"https://relay.dev/\">릴레이(Relay)</a></li>\n  <li><a href=\"https://www.apollographql.com/\">아폴로(Apollo GraphQL)</a></li>\n</ul>\n\n<h2 id=\"실제-graphql로-비지니스-로직-작성하기\">실제 GraphQL로 비지니스 로직 작성하기</h2>\n\n<p><img src=\"/files/graphql-business-layer.png\" alt=\"비지니스 로직 레이어 (출처: https://graphql.github.io/learn/thinking-in-graphs/)\" /></p>\n\n<p>앞서서 gql에 대한 개념을 익혔고, 비지니스 로직 작성을 간단히 보여드리겠습니다. 구현시, 비지니스 로직은 실제 리졸버 함수에 담지 않습니다. 로직은 비지니스 로직 레이어 (다른 파일의 다른 함수)에 작성을 하는 것을 권장합니다. 위 그림에도 나왔지만 이는 REST API를 제작할때 사용하는 패턴과 동일한 패턴입니다.</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    <span class=\"nx\">requestPaymentSession</span><span class=\"p\">:</span> <span class=\"k\">async</span> <span class=\"p\">(</span><span class=\"nx\">parent</span><span class=\"p\">,</span> <span class=\"p\">{</span> \n      <span class=\"nx\">pgId</span><span class=\"p\">,</span> <span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">sex</span><span class=\"p\">,</span> <span class=\"nx\">birthDay</span><span class=\"p\">,</span> <span class=\"nx\">phoneNumber</span><span class=\"p\">,</span> <span class=\"nx\">amount</span><span class=\"p\">,</span> <span class=\"nx\">productName</span><span class=\"p\">,</span> <span class=\"nx\">ref</span> \n    <span class=\"p\">},</span> <span class=\"nx\">context</span><span class=\"p\">,</span> <span class=\"nx\">info</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">ret</span> <span class=\"o\">=</span> <span class=\"kr\">await</span> <span class=\"nx\">requestPaymentSession</span><span class=\"p\">({</span> <span class=\"nx\">pgId</span><span class=\"p\">,</span> <span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">birthDay</span><span class=\"p\">,</span> <span class=\"nx\">phoneNumber</span><span class=\"p\">,</span> <span class=\"nx\">sex</span><span class=\"p\">,</span> <span class=\"nx\">amount</span><span class=\"p\">,</span> <span class=\"nx\">productName</span><span class=\"p\">,</span> <span class=\"nx\">ref</span> <span class=\"p\">})</span>\n\n      <span class=\"k\">return</span> <span class=\"nx\">removeSymbol</span><span class=\"p\">(</span><span class=\"nx\">ret</span><span class=\"p\">)</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">requestPaymentApprove</span><span class=\"p\">:</span> <span class=\"k\">async</span> <span class=\"p\">(</span><span class=\"nx\">parent</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"nx\">sessionKey</span><span class=\"p\">,</span> <span class=\"nx\">authNumber</span>\n    <span class=\"p\">},</span> <span class=\"nx\">context</span><span class=\"p\">,</span> <span class=\"nx\">info</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">ret</span> <span class=\"o\">=</span> <span class=\"kr\">await</span> <span class=\"nx\">requestApprovePayment</span><span class=\"p\">({</span> <span class=\"nx\">sessionKey</span><span class=\"p\">,</span> <span class=\"nx\">authNumber</span> <span class=\"p\">})</span>\n\n      <span class=\"k\">return</span> <span class=\"nx\">removeSymbol</span><span class=\"p\">(</span><span class=\"nx\">ret</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n</code></pre></div></div>\n<p><em>실제 구현한 비지니스 로직 관련 리졸버</em></p>\n\n<h2 id=\"정리\">정리</h2>\n\n<p>gql은 퍼포먼스적인 장점이 분명 존재합니다. 하지만 개인적으로 더 관심이 가는 장점은 바로 생산성 향상입니다. gql은 기존 백앤드-프론트앤드 협업 문화를 많이 바꿀것으로 예상합니다. gql의 협업 구조상 프론트앤드쪽에 조금 더 할일이 많아지고 힘이 실리는 느낌입니다. 에자일하게 웹사이트 프로젝트를 진행하는데 gql이 많은 도움이 될 것이라고 생각합니다.</p>\n\n<p>개발자 여러분에게 안타까운 소식을 전하자면, 이 글을 읽었다고 해서 gql을 바로 실전에서 사용하기는 쉽지 않을 것입니다. 이 글에서는 gql의 클라이언트 모듈에 대해서는 구체적으로 언급하지도 않았습니다. 특히 react를 혼합해서 사용하려면, 또 다시 가파른 고개를 넘어서야 제대로 사용 할 수 있을 것입니다. 요즘 react는 flux 아키텍쳐가 점령 했습니다. flux 아키텍쳐는 아름답지만, flux와 함께 gql을 구현하는 일은 또 다른 숙제가 될 것입니다. 개인적인 생각으로는 apollo client의 <a href=\"https://www.apollographql.com/docs/react/essentials/local-state\">local statment management</a> 기능은 flux 아키텍쳐를 구체화하여 구현한 redux를 완전히 대처 가능하다고 생각합니다. 추후에 기회가 된다면 react와 apollo 조합에 대해서 이야기 해볼까 합니다. 항상 공부하는 개발자의 모습은 아름답습니다. 이 세상의 모든 개발자 화이팅입니다.</p>\n\n<p>참고 사이트</p>\n<ul>\n  <li>https://graphql.org</li>\n</ul>\n\n<blockquote>\n  <p>이 글은 핀플레이 결제 프로젝트를 진행시 Graphql을 도입하며 얻은 경험을 바탕으로 작성하였습니다.</p>\n</blockquote>\n"
    } 
  
  
    
,
  {
    "title"    : "404",
    "category" : "",
    "tags"     : "",
    "url"      : "/404.html",
    "date"     : "",
    "content"   : "<div style=\"text-align:center;\">\n    <h1>404 Not Found</h1>\n    <img src=\"/assets/images/404.png\" alt=\"404 not found image\"/>\n</div>\n"
  }
    
  
    
,
  {
    "title"    : "About",
    "category" : "",
    "tags"     : "about",
    "url"      : "/about/",
    "date"     : "",
    "content"   : "<p><a href=\"http://www.kakaocorp.com\">kakao</a> 기술블로그 입니다.</p>\n\n<p>Powered by <a href=\"https://pages.github.com\">GitHub Pages</a> and <a href=\"https://jekyllrb.com\">Jekyll</a>.</p>\n\n"
  }
    
  
    
,
  {
    "title"    : "Authors",
    "category" : "",
    "tags"     : "",
    "url"      : "/authors/",
    "date"     : "",
    "content"   : "\n<ul>\n  <li><a href=\"/authors/Harry\">Harry</a></li>\n</ul>\n\n"
  }
    
  
    
,
  {
    "title"    : "기술 행사",
    "category" : "",
    "tags"     : "events",
    "url"      : "/events/",
    "date"     : "",
    "content"   : "<h2 id=\"주최-if-kakao-개발자-컨퍼런스-2018\">[주최] if kakao 개발자 컨퍼런스 2018</h2>\n\n<ul>\n  <li><a href=\"https://if.kakao.com\">https://if.kakao.com/</a></li>\n  <li>일정: 2018년 9월 4일</li>\n  <li>장소: 서울 삼성동 COEX 그랜드볼룸</li>\n</ul>\n\n<h2 id=\"주최-카카오-code-festival-2018\">[주최] 카카오 Code Festival 2018</h2>\n\n<ul>\n  <li><a href=\"https://www.kakaocode.com\">https://www.kakaocode.com/</a></li>\n  <li>온라인 예선: 2018년 8월 4일(토) 오후 1시~7시</li>\n  <li>오프라인 본선: 2018년 8월 25일(토) 오후 1시~6시</li>\n  <li>장소: 카카오 판교 오피스</li>\n  <li>내용: 카카오에서 준비한 대학(원)생 프로그래밍 경진대회</li>\n</ul>\n\n<blockquote>\n  <p><strong>[행사 후기 및 문제 해설]</strong></p>\n\n  <ul>\n    <li><a href=\"https://brunch.co.kr/@andkakao/67\">즐거운 알고리듬 축제, 카카오 코드 페스티벌</a></li>\n    <li><a href=\"http://tech.kakao.com/2018/08/09/code-festival-2018-round-1/\">카카오 코드 페스티벌 2018 예선전 이야기</a></li>\n    <li><a href=\"http://tech.kakao.com/2018/09/12/code-festival-2018-round-2/\">카카오 코드 페스티벌 2018 본선 이야기</a></li>\n  </ul>\n</blockquote>\n\n<h2 id=\"주최-카카오-code-festival-2017\">[주최] 카카오 Code Festival 2017</h2>\n\n<ul>\n  <li>온라인 예선: 2017년 8월 5일(토) 오후 1시~7시</li>\n  <li>오프라인 본선: 2017년 9월 9일(토) 오후 1시~6시</li>\n  <li>장소: 성남시 경기창조경제혁신센터</li>\n  <li>내용: 카카오에서 준비한 대학(원)생 프로그래밍 경진대회</li>\n</ul>\n\n<blockquote>\n  <p><strong>[행사 후기 및 문제 해설]</strong></p>\n\n  <ul>\n    <li><a href=\"http://blog.kakaocorp.co.kr/648\">카카오 코드 페스티벌, 본선의 막이 열리다!</a></li>\n    <li><a href=\"http://tech.kakao.com/2017/08/11/code-festival-round-1/\">카카오 코드 페스티벌 예선전 이야기</a></li>\n    <li><a href=\"http://tech.kakao.com/2017/09/14/code-festival-round-2/\">카카오 코드 페스티벌 본선 이야기</a></li>\n  </ul>\n</blockquote>\n\n<h2 id=\"후원-pycon-apac-2016\">[후원] PyCon APAC 2016</h2>\n\n<ul>\n  <li><a href=\"https://www.pycon.kr/2016apac/\">https://www.pycon.kr/2016apac/</a></li>\n  <li>일정: 2016년 8월 13일 ~ 15일</li>\n  <li>장소: 강남구 코엑스 전시장</li>\n  <li>주최: 파이콘 한국 준비 위원회</li>\n</ul>\n\n<blockquote>\n  <p><strong>[후원 후기]</strong></p>\n\n  <ul>\n    <li><a href=\"http://tech.kakao.com/2016/08/19/gawibawibo/\">CODING BATTLE 가위바위보! - 못다한 이야기</a></li>\n    <li><a href=\"http://tech.kakao.com/pycon2016apac\">CODING BATTLE 가위바위보 이벤트 페이지</a></li>\n  </ul>\n</blockquote>\n\n<h2 id=\"후원-rtfm-나는-프로그래머다\">[후원] RT:FM 나는 프로그래머다</h2>\n\n<ul>\n  <li><a href=\"http://onoffmix.com/event/55258\">http://onoffmix.com/event/55258</a></li>\n  <li>일정: 2016년 6월 24일(금) 12:30~ 20:40</li>\n  <li>장소: 더케이트윈타워 A동 11층</li>\n  <li>주최: 한빛미디어, 나는 프로그래머다</li>\n</ul>\n\n<h2 id=\"후원-우리가-데이터를-쓰는-법how-we-use-data\">[후원] 우리가 데이터를 쓰는 법(How We Use Data)</h2>\n\n<ul>\n  <li>주최: <a href=\"http://www.gonnector.com\">고넥터(Gonnector)</a></li>\n  <li>일정: 2016년 04월 12일</li>\n  <li>장소: 역삼동 MARU180</li>\n</ul>\n\n<h2 id=\"후원-playnode-2015\">[후원] PlayNode 2015</h2>\n\n<ul>\n  <li><a href=\"http://playnode.io\">http://playnode.io</a></li>\n  <li>일정: 2015년 11월 12일</li>\n  <li>장소: 신대방동 전문건설회관</li>\n</ul>\n\n<h2 id=\"주최-api-bootcamp-2014\">[주최] API BootCamp 2014</h2>\n\n<ul>\n  <li>일시: 2014년 5월 10일(토)</li>\n  <li>장소: 다음커뮤니케이션 한남오피스 5F</li>\n  <li>내용: 주요 API 및 모바일 SDK 소개 및 실습(센서, 음성인식/로그인, OAuth 2.0 …)</li>\n</ul>\n\n<h2 id=\"후원-firefox-개발자-콘퍼런스-2014\">[후원] Firefox 개발자 콘퍼런스 2014</h2>\n\n<ul>\n  <li><a href=\"http://www.mozilla.or.kr/devcon/2014/\">http://www.mozilla.or.kr/devcon/2014/</a></li>\n  <li>일시: 2014년 4월 10일(목)</li>\n  <li>장소: 코엑스 콘퍼런스 센터 317호</li>\n</ul>\n\n<h2 id=\"주최-api-미트업-2014\">[주최] API 미트업 2014</h2>\n\n<ul>\n  <li>일시: 2014년 4월 8일(화)</li>\n  <li>장소: 역삼동 D.Camp</li>\n  <li>내용: 글로벌 API 서비스 동향 및 Daum API에 대한 발표</li>\n</ul>\n\n<h2 id=\"후원-ms-이매진컵-2014-국가대표-선발전\">[후원] MS 이매진컵 2014, 국가대표 선발전</h2>\n\n<ul>\n  <li>일시: 2014년 3월 27일(목) ~ 28일(금)</li>\n  <li>장소: 부산 동서대학교 센텀캠퍼스 소향씨어터</li>\n</ul>\n\n<h2 id=\"주최-devday-15th\">[주최] Devday 15th</h2>\n\n<ul>\n  <li>일시: 2014년 2월 28 ~ 29일</li>\n  <li>장소: 제주 스페이스.1</li>\n  <li>내용: 오픈 API를 이용한 창의적인 아이디어 구현과 개발자간 교류 확대</li>\n</ul>\n\n<h2 id=\"주최-devon-2013\">[주최] Devon 2013</h2>\n\n<ul>\n  <li>일시: 2013년 10월 26 ~ 27일</li>\n  <li>장소: 코엑스 전시장(Hall D1)</li>\n</ul>\n\n<h2 id=\"주최-devon-2012\">[주최] Devon 2012</h2>\n\n<ul>\n  <li>일시: 2012년 10월 12일</li>\n  <li>장소: 신도림 디큐브시티</li>\n</ul>\n\n<h2 id=\"주최-devon-2011\">[주최] Devon 2011</h2>\n\n<ul>\n  <li>일시: 2011년 11월 25일</li>\n  <li>장소: 신림동 쉐라톤서울 호텔 디큐브시티</li>\n</ul>\n"
  }
    
  
    
  
    
,
  {
    "title"    : "kakao의 오픈API",
    "category" : "",
    "tags"     : "openapi",
    "url"      : "/openapi/",
    "date"     : "",
    "content"   : "<h2 id=\"kakao-developers\"><a href=\"https://developers.kakao.com\">Kakao Developers</a></h2>\n\n<ul>\n  <li><a href=\"https://developers.kakao.com/features/platform\">플랫폼 API</a>\n    <ul>\n      <li><a href=\"https://developers.kakao.com/features/platform#사용자관리\">사용자관리</a></li>\n      <li><a href=\"https://developers.kakao.com/features/platform#푸시-알림\">푸시알림</a></li>\n      <li><a href=\"https://developers.kakao.com/features/platform#앱로그-분석\">앱로그 분석</a></li>\n      <li><a href=\"https://developers.kakao.com/features/platform#검색\">검색</a></li>\n      <li><a href=\"https://developers.kakao.com/features/platform#음성\">음성</a></li>\n      <li><a href=\"https://developers.kakao.com/features/platform#지도-로컬\">지도/로컬</a></li>\n      <li><a href=\"https://developers.kakao.com/features/platform#비전\">비전</a></li>\n      <li><a href=\"https://developers.kakao.com/features/platform#번역\">번역</a></li>\n      <li><a href=\"https://developers.kakao.com/features/platform#친구-API\">친구</a></li>\n    </ul>\n  </li>\n  <li><a href=\"https://developers.kakao.com/features/kakao\">카카오 서비스 API</a>\n    <ul>\n      <li><a href=\"https://developers.kakao.com/features/kakao#카카오내비-API\">카카오내비</a></li>\n      <li><a href=\"https://developers.kakao.com/features/kakao#카카오페이-API\">카카오페이</a></li>\n      <li><a href=\"https://developers.kakao.com/features/kakao#카카오톡-API\">카카오톡</a></li>\n      <li><a href=\"https://developers.kakao.com/features/kakao#카카오-링크\">카카오링크</a></li>\n      <li><a href=\"https://developers.kakao.com/features/kakao#카카오스토리-API\">카카오스토리</a></li>\n      <li><a href=\"https://developers.kakao.com/features/kakao#플러스친구-API\">플러스친구</a></li>\n      <li><a href=\"https://developers.kakao.com/features/kakao#카카오모먼트-API\">카카오모먼트</a></li>\n    </ul>\n  </li>\n  <li><a href=\"https://developers.kakao.com/docs\">개발가이드</a></li>\n  <li><a href=\"https://devtalk.kakao.com/\">개발자포럼(DevTalk)</a></li>\n  <li><del><a href=\"http://www.kakao.com/services/api/kakao_link\">카카오톡 링크</a></del></li>\n  <li><del><a href=\"http://www.kakao.com/services/api/story_link\">스토리 링크</a></del></li>\n</ul>\n\n<h2 id=\"daum-developers\"><a href=\"https://developers.daum.net\">Daum Developers</a></h2>\n\n<ul>\n  <li><a href=\"https://developers.daum.net/console\">콘솔</a></li>\n  <li><a href=\"http://developers.daum.net/services\">API</a></li>\n  <li><a href=\"http://developers.daum.net/services/apis/search\">검색</a></li>\n  <li><a href=\"http://developers.daum.net/services/apis/newtone\">뉴톤</a></li>\n  <li><a href=\"http://developers.daum.net/services/apis/login\">로그인</a></li>\n  <li><a href=\"http://developers.daum.net/services/apis/local\">로컬</a></li>\n  <li><a href=\"http://developers.daum.net/services/apis/blog\">블로그</a></li>\n  <li><a href=\"http://developers.daum.net/services/apis/shopping\">쇼핑</a></li>\n  <li><a href=\"http://apis.map.daum.net\">지도</a></li>\n  <li><a href=\"http://developers.daum.net/services/apis/cafe\">카페</a></li>\n  <li><a href=\"http://developers.daum.net/services/apis/calendar\">캘린더</a></li>\n  <li><a href=\"http://developers.daum.net/services/apis/contents\">콘텐츠</a></li>\n  <li><a href=\"http://developers.daum.net/services/apis/user\">프로필</a></li>\n  <li><a href=\"http://cafe.daum.net/daumdna\">개발자 카페</a></li>\n</ul>\n\n<h2 id=\"카카오-게임-센터\"><a href=\"https://gamecenter.kakao.com/\">카카오 게임 센터</a></h2>\n\n<ul>\n  <li><a href=\"https://biz.kakao.com\">비즈 계정 센터</a></li>\n</ul>\n\n<h2 id=\"플러스친구\"><a href=\"https://center-pf.kakao.com/\">플러스친구</a></h2>\n\n<ul>\n  <li><a href=\"https://github.com/plusfriend/auto_reply\">API 문서</a></li>\n</ul>\n\n<h3 id=\"티스토리\"><a href=\"https://tistory.github.io/document-tistory-apis/\">티스토리</a></h3>\n\n<ul>\n  <li><a href=\"https://tistory.github.io/document-tistory-apis/auth/\">OAuth 인증 가이드</a></li>\n  <li><a href=\"https://tistory.github.io/document-tistory-apis/apis/\">API 가이드</a>\n    <ul>\n      <li><a href=\"https://tistory.github.io/document-tistory-apis/apis/v1/blog/list\">블로그 정보</a></li>\n      <li>글\n        <ul>\n          <li><a href=\"https://tistory.github.io/document-tistory-apis/apis/v1/post/list\">글 목록</a></li>\n          <li><a href=\"https://tistory.github.io/document-tistory-apis/apis/v1/post/read\">글 읽기</a></li>\n          <li><a href=\"https://tistory.github.io/document-tistory-apis/apis/v1/post/write\">글 작성</a></li>\n          <li><a href=\"https://tistory.github.io/document-tistory-apis/apis/v1/post/modify\">글 수정</a></li>\n          <li><a href=\"https://tistory.github.io/document-tistory-apis/apis/v1/post/attach\">파일 첨부</a></li>\n        </ul>\n      </li>\n      <li><a href=\"https://tistory.github.io/document-tistory-apis/apis/v1/category/list\">카테고리</a></li>\n      <li>댓글\n        <ul>\n          <li><a href=\"https://tistory.github.io/document-tistory-apis/apis/v1/comment/recent\">최근 댓글 목록</a></li>\n          <li><a href=\"https://tistory.github.io/document-tistory-apis/apis/v1/comment/list\">댓글 목록</a></li>\n          <li><a href=\"https://tistory.github.io/document-tistory-apis/apis/v1/comment/write\">댓글 작성</a></li>\n          <li><a href=\"https://tistory.github.io/document-tistory-apis/apis/v1/comment/modify\">댓글 수정</a></li>\n          <li><a href=\"https://tistory.github.io/document-tistory-apis/apis/v1/comment/delete\">댓글 삭제</a></li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n<!--\n* 커버 이미지 출처: [API Testing and some amazing testing tools](http://go-gaga-over-testing.blogspot.kr/2013/11/api-testing-and-some-amazing-testing.html)\n-->\n"
  }
    
  
    
,
  {
    "title"    : "kakao의 오픈소스",
    "category" : "",
    "tags"     : "opensource, s2graph, mrte, hbase-tools, hbase-region-inspector, adt, daum-editor",
    "url"      : "/opensource/",
    "date"     : "",
    "content"   : "<a id=\"forkme\" href=\"https://github.com/kakao\"></a>\n<link rel=\"stylesheet\" href=\"../assets/css/opensource.css\">\n<div class=\"row\">\n\t\n\t<div class=\"col-sm-6\">\n\t\t<div class=\"card\">\n\t\t\t<div class=\"card-body\">\n\t\t\t\t<h2 class=\"card-title\" style=\"margin:10px 0 0 0;\">khaiii</h2>\n\t\t\t\t<h6 class=\"card-subtitle mb-2 text-muted\" style=\"margin-top:10px\">Kakao Hangul Analyzer III</h6>\n\t\t\t\t<p class=\"card-text\">카카오의 딥러닝 기반 형태소 분석기</p>\n\t\t\t\t<p class=\"post-tags\">\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t<a href=\"/tags/Deep-Learning\" target=\"_blank\" title=\"opensource\" class=\"tag tag-opensource\" style=\"text-decoration: none\">Deep-Learning</a>\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t<a href=\"/tags/CNN\" target=\"_blank\" title=\"opensource\" class=\"tag tag-opensource\" style=\"text-decoration: none\">CNN</a>\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t<a href=\"/tags/AI\" target=\"_blank\" title=\"opensource\" class=\"tag tag-opensource\" style=\"text-decoration: none\">AI</a>\n\t\t\t\t\t\n\t\t\t\t</p><br/>\n\t\t\t\t<a href=\"https://github.com/kakao/khaiii\" target=\"_blank\" class=\"btn btn-primary\" style=\"color:#fff; text-decoration: none;\">> GitHub</a>\n\t\t\t\t\n\t\t\t\t<a href=\"http://tech.kakao.com/2018/12/13/khaiii/\" class=\"btn btn-primary\" style=\"color:#fff; text-decoration: none;\">> Blog</a>\n\t\t\t\t\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t\n\t<div class=\"col-sm-6\">\n\t\t<div class=\"card\">\n\t\t\t<div class=\"card-body\">\n\t\t\t\t<h2 class=\"card-title\" style=\"margin:10px 0 0 0;\">Apache S2Graph</h2>\n\t\t\t\t<h6 class=\"card-subtitle mb-2 text-muted\" style=\"margin-top:10px\">대용량 분산 그래프DB \"S2Graph\"</h6>\n\t\t\t\t<p class=\"card-text\"><a href=\"http://s2graph.incubator.apache.org\">아파치 인큐베이터 프로젝트</a>로 선정(2015/11/29)</p>\n\t\t\t\t<p class=\"post-tags\">\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t<a href=\"http://scala-lang.org\" target=\"_blank\" title=\"opensource\" class=\"tag tag-opensource\" style=\"text-decoration: none\">Scala</a>\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t<a href=\"https://www.playframework.com\" target=\"_blank\" title=\"opensource\" class=\"tag tag-opensource\" style=\"text-decoration: none\">Play 프레임웍</a>\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t<a href=\"https://hbase.apache.org\" target=\"_blank\" title=\"opensource\" class=\"tag tag-opensource\" style=\"text-decoration: none\">HBase</a>\n\t\t\t\t\t\n\t\t\t\t</p><br/>\n\t\t\t\t<a href=\"https://github.com/apache/incubator-s2graph\" target=\"_blank\" class=\"btn btn-primary\" style=\"color:#fff; text-decoration: none;\">> GitHub</a>\n\t\t\t\t\n\t\t\t\t<a href=\"http://tech.kakao.com/2016/01/29/opensource-1-s2graph/\" class=\"btn btn-primary\" style=\"color:#fff; text-decoration: none;\">> Blog</a>\n\t\t\t\t\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t\n\t<div class=\"col-sm-6\">\n\t\t<div class=\"card\">\n\t\t\t<div class=\"card-body\">\n\t\t\t\t<h2 class=\"card-title\" style=\"margin:10px 0 0 0;\">N2</h2>\n\t\t\t\t<h6 class=\"card-subtitle mb-2 text-muted\" style=\"margin-top:10px\">approximate Nearest Neighbor</h6>\n\t\t\t\t<p class=\"card-text\">nmslib 기반으로 개선한 버전으로 사용이 쉽고, 검색속도와 인덱스 생성 시간이 빠름</p>\n\t\t\t\t<p class=\"post-tags\">\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t<a href=\"https://arxiv.org/abs/1603.09320\" target=\"_blank\" title=\"opensource\" class=\"tag tag-opensource\" style=\"text-decoration: none\">HNSW</a>\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t<a href=\"https://github.com/searchivarius/NMSLIB\" target=\"_blank\" title=\"opensource\" class=\"tag tag-opensource\" style=\"text-decoration: none\">NMSLIB</a>\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t<a href=\"https://github.com/spotify/annoy\" target=\"_blank\" title=\"opensource\" class=\"tag tag-opensource\" style=\"text-decoration: none\">Annoy</a>\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t<a href=\"https://golang.org\" target=\"_blank\" title=\"opensource\" class=\"tag tag-opensource\" style=\"text-decoration: none\">Go</a>\n\t\t\t\t\t\n\t\t\t\t</p><br/>\n\t\t\t\t<a href=\"https://github.com/kakao/n2\" target=\"_blank\" class=\"btn btn-primary\" style=\"color:#fff; text-decoration: none;\">> GitHub</a>\n\t\t\t\t\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t\n\t<div class=\"col-sm-6\">\n\t\t<div class=\"card\">\n\t\t\t<div class=\"card-body\">\n\t\t\t\t<h2 class=\"card-title\" style=\"margin:10px 0 0 0;\">Duct module.lacinia</h2>\n\t\t\t\t<h6 class=\"card-subtitle mb-2 text-muted\" style=\"margin-top:10px\">Clojure 언어에서 사용하는 Duct 서버 프레임워크 용 GraphQL 모듈</h6>\n\t\t\t\t<p class=\"card-text\"><a href=\"https://clojars.org/\">clojars.org</a>와 <a href=\"https://github.com/duct-framework/duct/wiki/Modules\">duct wiki module</a>로 공개</p>\n\t\t\t\t<p class=\"post-tags\">\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t<a href=\"https://github.com/threatgrid/ring-graphql-ui\" target=\"_blank\" title=\"opensource\" class=\"tag tag-opensource\" style=\"text-decoration: none\">ring-graphql-ui</a>\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t<a href=\"https://github.com/walmartlabs/lacinia\" target=\"_blank\" title=\"opensource\" class=\"tag tag-opensource\" style=\"text-decoration: none\">Lacinia</a>\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t<a href=\"http://clojure.org\" target=\"_blank\" title=\"opensource\" class=\"tag tag-opensource\" style=\"text-decoration: none\">Clojure</a>\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t<a href=\"https://github.com/duct-framework/duct\" target=\"_blank\" title=\"opensource\" class=\"tag tag-opensource\" style=\"text-decoration: none\">Duct</a>\n\t\t\t\t\t\n\t\t\t\t</p><br/>\n\t\t\t\t<a href=\"https://github.com/kakao/duct-lacinia\" target=\"_blank\" class=\"btn btn-primary\" style=\"color:#fff; text-decoration: none;\">> GitHub</a>\n\t\t\t\t\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t\n\t<div class=\"col-sm-6\">\n\t\t<div class=\"card\">\n\t\t\t<div class=\"card-body\">\n\t\t\t\t<h2 class=\"card-title\" style=\"margin:10px 0 0 0;\">HBase Tools</h2>\n\t\t\t\t<h6 class=\"card-subtitle mb-2 text-muted\" style=\"margin-top:10px\">HBase 명령행 도구 모음</h6>\n\t\t\t\t<p class=\"card-text\"></p>\n\t\t\t\t<p class=\"post-tags\">\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t<a href=\"http://clojure.org\" target=\"_blank\" title=\"opensource\" class=\"tag tag-opensource\" style=\"text-decoration: none\">Clojure</a>\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t<a href=\"https://hbase.apache.org\" target=\"_blank\" title=\"opensource\" class=\"tag tag-opensource\" style=\"text-decoration: none\">HBase</a>\n\t\t\t\t\t\n\t\t\t\t</p><br/>\n\t\t\t\t<a href=\"https://github.com/kakao/hbase-tools\" target=\"_blank\" class=\"btn btn-primary\" style=\"color:#fff; text-decoration: none;\">> GitHub</a>\n\t\t\t\t\n\t\t\t\t<a href=\"http://tech.kakao.com/2016/03/24/opensource-4-hbase-tools/\" class=\"btn btn-primary\" style=\"color:#fff; text-decoration: none;\">> Blog</a>\n\t\t\t\t\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t\n\t<div class=\"col-sm-6\">\n\t\t<div class=\"card\">\n\t\t\t<div class=\"card-body\">\n\t\t\t\t<h2 class=\"card-title\" style=\"margin:10px 0 0 0;\">HBase Region Inspector</h2>\n\t\t\t\t<h6 class=\"card-subtitle mb-2 text-muted\" style=\"margin-top:10px\">HBase 리젼 통계 시각화 도구</h6>\n\t\t\t\t<p class=\"card-text\"></p>\n\t\t\t\t<p class=\"post-tags\">\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t<a href=\"http://clojure.org\" target=\"_blank\" title=\"opensource\" class=\"tag tag-opensource\" style=\"text-decoration: none\">Clojure</a>\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t<a href=\"https://hbase.apache.org\" target=\"_blank\" title=\"opensource\" class=\"tag tag-opensource\" style=\"text-decoration: none\">HBase</a>\n\t\t\t\t\t\n\t\t\t\t</p><br/>\n\t\t\t\t<a href=\"https://github.com/kakao/hbase-region-inspector\" target=\"_blank\" class=\"btn btn-primary\" style=\"color:#fff; text-decoration: none;\">> GitHub</a>\n\t\t\t\t\n\t\t\t\t<a href=\"http://tech.kakao.com/2016/03/11/opensource-3-hri/\" class=\"btn btn-primary\" style=\"color:#fff; text-decoration: none;\">> Blog</a>\n\t\t\t\t\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t\n\t<div class=\"col-sm-6\">\n\t\t<div class=\"card\">\n\t\t\t<div class=\"card-body\">\n\t\t\t\t<h2 class=\"card-title\" style=\"margin:10px 0 0 0;\">HBase Packet Inspector</h2>\n\t\t\t\t<h6 class=\"card-subtitle mb-2 text-muted\" style=\"margin-top:10px\">HBase 리젼서버의 네트워크 패킷을 분석해 요청과 응답 정보를 추출하는 툴</h6>\n\t\t\t\t<p class=\"card-text\"></p>\n\t\t\t\t<p class=\"post-tags\">\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t<a href=\"http://clojure.org\" target=\"_blank\" title=\"opensource\" class=\"tag tag-opensource\" style=\"text-decoration: none\">Clojure</a>\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t<a href=\"https://hbase.apache.org\" target=\"_blank\" title=\"opensource\" class=\"tag tag-opensource\" style=\"text-decoration: none\">HBase</a>\n\t\t\t\t\t\n\t\t\t\t</p><br/>\n\t\t\t\t<a href=\"https://github.com/kakao/hbase-packet-inspector\" target=\"_blank\" class=\"btn btn-primary\" style=\"color:#fff; text-decoration: none;\">> GitHub</a>\n\t\t\t\t\n\t\t\t\t<a href=\"http://tech.kakao.com/2017/09/22/opensource-8-hbase-packet-inspector/\" class=\"btn btn-primary\" style=\"color:#fff; text-decoration: none;\">> Blog</a>\n\t\t\t\t\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t\n\t<div class=\"col-sm-6\">\n\t\t<div class=\"card\">\n\t\t\t<div class=\"card-body\">\n\t\t\t\t<h2 class=\"card-title\" style=\"margin:10px 0 0 0;\">CMUX</h2>\n\t\t\t\t<h6 class=\"card-subtitle mb-2 text-muted\" style=\"margin-top:10px\">CMUX| CLI에 날개를 달자!</h6>\n\t\t\t\t<p class=\"card-text\">Cloudera Manager 기반의 하둡 클러스터를 관리하는데 필요한 대화형 커맨드라인 인터페이스 도구들</p>\n\t\t\t\t<p class=\"post-tags\">\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t<a href=\"https://www.cloudera.com/products/product-components/cloudera-manager.html\" target=\"_blank\" title=\"opensource\" class=\"tag tag-opensource\" style=\"text-decoration: none\">Cloudera Manager</a>\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t<a href=\"https://github.com/tmux/tmux/wiki\" target=\"_blank\" title=\"opensource\" class=\"tag tag-opensource\" style=\"text-decoration: none\">TMUX</a>\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t<a href=\"https://github.com/junegunn/fzf\" target=\"_blank\" title=\"opensource\" class=\"tag tag-opensource\" style=\"text-decoration: none\">FZF</a>\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t<a href=\"https://www.ruby-lang.org\" target=\"_blank\" title=\"opensource\" class=\"tag tag-opensource\" style=\"text-decoration: none\">Ruby</a>\n\t\t\t\t\t\n\t\t\t\t</p><br/>\n\t\t\t\t<a href=\"https://github.com/kakao/cmux\" target=\"_blank\" class=\"btn btn-primary\" style=\"color:#fff; text-decoration: none;\">> GitHub</a>\n\t\t\t\t\n\t\t\t\t<a href=\"http://tech.kakao.com/2017/07/12/opensource-7-cmux/\" class=\"btn btn-primary\" style=\"color:#fff; text-decoration: none;\">> Blog</a>\n\t\t\t\t\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t\n\t<div class=\"col-sm-6\">\n\t\t<div class=\"card\">\n\t\t\t<div class=\"card-body\">\n\t\t\t\t<h2 class=\"card-title\" style=\"margin:10px 0 0 0;\">MRTE-Collector</h2>\n\t\t\t\t<h6 class=\"card-subtitle mb-2 text-muted\" style=\"margin-top:10px\">MRTE(MySQL Realtime Traffic Emulator) Collector</h6>\n\t\t\t\t<p class=\"card-text\">실제 서비스의 MySQL 트래픽을 실시간으로 수집</p>\n\t\t\t\t<p class=\"post-tags\">\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t<a href=\"https://golang.org\" target=\"_blank\" title=\"opensource\" class=\"tag tag-opensource\" style=\"text-decoration: none\">Go</a>\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t<a href=\"http://www.mysql.com\" target=\"_blank\" title=\"opensource\" class=\"tag tag-opensource\" style=\"text-decoration: none\">MySQL</a>\n\t\t\t\t\t\n\t\t\t\t</p><br/>\n\t\t\t\t<a href=\"https://github.com/kakao/MRTE-Collector\" target=\"_blank\" class=\"btn btn-primary\" style=\"color:#fff; text-decoration: none;\">> GitHub</a>\n\t\t\t\t\n\t\t\t\t<a href=\"http://tech.kakao.com/2016/02/16/opensource-2-mtre/\" class=\"btn btn-primary\" style=\"color:#fff; text-decoration: none;\">> Blog</a>\n\t\t\t\t\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t\n\t<div class=\"col-sm-6\">\n\t\t<div class=\"card\">\n\t\t\t<div class=\"card-body\">\n\t\t\t\t<h2 class=\"card-title\" style=\"margin:10px 0 0 0;\">MRTE-Player</h2>\n\t\t\t\t<h6 class=\"card-subtitle mb-2 text-muted\" style=\"margin-top:10px\">MRTE(MySQL Realtime Traffic Emulator) Player</h6>\n\t\t\t\t<p class=\"card-text\">실제 서비스에서 수집한 데이터를 테스트 환경의 MySQL에서 재현</p>\n\t\t\t\t<p class=\"post-tags\">\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t<a href=\"https://golang.org\" target=\"_blank\" title=\"opensource\" class=\"tag tag-opensource\" style=\"text-decoration: none\">Go</a>\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t<a href=\"http://www.mysql.com\" target=\"_blank\" title=\"opensource\" class=\"tag tag-opensource\" style=\"text-decoration: none\">MySQL</a>\n\t\t\t\t\t\n\t\t\t\t</p><br/>\n\t\t\t\t<a href=\"https://github.com/kakao/MRTE-Player\" target=\"_blank\" class=\"btn btn-primary\" style=\"color:#fff; text-decoration: none;\">> GitHub</a>\n\t\t\t\t\n\t\t\t\t<a href=\"http://tech.kakao.com/2016/02/16/opensource-2-mtre/\" class=\"btn btn-primary\" style=\"color:#fff; text-decoration: none;\">> Blog</a>\n\t\t\t\t\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t\n\t<div class=\"col-sm-6\">\n\t\t<div class=\"card\">\n\t\t\t<div class=\"card-body\">\n\t\t\t\t<h2 class=\"card-title\" style=\"margin:10px 0 0 0;\">ADT</h2>\n\t\t\t\t<h6 class=\"card-subtitle mb-2 text-muted\" style=\"margin-top:10px\">Almighty Data Transmitter</h6>\n\t\t\t\t<p class=\"card-text\">MySQL 샤드 재분배, 실시간 마이그레이션</p>\n\t\t\t\t<p class=\"post-tags\">\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t<a href=\"http://tech.kakao.com/tags/adt/\" target=\"_blank\" title=\"opensource\" class=\"tag tag-opensource\" style=\"text-decoration: none\">adt</a>\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t<a href=\"http://www.mysql.com\" target=\"_blank\" title=\"opensource\" class=\"tag tag-opensource\" style=\"text-decoration: none\">MySQL</a>\n\t\t\t\t\t\n\t\t\t\t</p><br/>\n\t\t\t\t<a href=\"https://github.com/kakao/adt\" target=\"_blank\" class=\"btn btn-primary\" style=\"color:#fff; text-decoration: none;\">> GitHub</a>\n\t\t\t\t\n\t\t\t\t<a href=\"http://tech.kakao.com/2016/06/27/opensource-5-adt\" class=\"btn btn-primary\" style=\"color:#fff; text-decoration: none;\">> Blog</a>\n\t\t\t\t\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t\n</div>"
  }
    
  
    
,
  {
    "title"    : "코딩배틀 가위바위보 in 파이콘 2016 APAC",
    "category" : "",
    "tags"     : "events",
    "url"      : "/pycon2016apac/",
    "date"     : "",
    "content"   : "<p><a href=\"http://tech.kakao.com/2016/08/19/gawibawibo/\">CODING BATTLE 가위바위보! - 못다한 이야기</a> 참조</p>\n\n<hr />\n\n<blockquote>\n  <h2 id=\"둘째날814-경기-결과\">둘째날(8/14) 경기 결과</h2>\n\n  <ul>\n    <li>1위 : qkqnrpa</li>\n    <li>2위 : johnjanghochoi</li>\n    <li>3위 : bak723 &amp; bage79</li>\n  </ul>\n</blockquote>\n\n<hr />\n\n<blockquote>\n  <h2 id=\"첫째날813-경기-결과\">첫째날(8/13) 경기 결과</h2>\n\n  <ul>\n    <li>1위 : k239507</li>\n    <li>2위 : hulk</li>\n    <li>3위 : eclipse1725 &amp; hahanbyul</li>\n  </ul>\n</blockquote>\n\n<hr />\n\n<h2 id=\"참가-자격\">참가 자격</h2>\n\n<ul>\n  <li><a href=\"https://www.pycon.kr/2016apac\">파이콘 2016 APAC</a> 참석자 누구나 가능합니다.</li>\n  <li>주의: <a href=\"http://kakaocorp.com\">Kakao Corp.</a>의 임직원도 참여하실 수 있으나, 경품은 받으실 수 없습니다.</li>\n  <li><strong>8/14변경</strong> 어제(8/13) 참가자도 다시 참가하실 수 있지만, 동일한 상품을 중복으로 받을 수 없습니다.</li>\n</ul>\n\n<h2 id=\"참여-방법\">참여 방법</h2>\n\n<p>아래의 요구사항을 만족하는 <strong>파이썬 소스코드</strong>를 <a href=\"mailto:opensource@kakaocorp.com\">opensource@kakaocorp.com</a>에게 메일로 보내주세요.</p>\n\n<ul>\n  <li>메일 제목: <code class=\"highlighter-rouge\">pycon2016apac</code></li>\n  <li>첨부 파일: <code class=\"highlighter-rouge\">player.py</code> 또는 <code class=\"highlighter-rouge\">player.py</code>를 포함하는 <code class=\"highlighter-rouge\">player.zip</code></li>\n  <li>신청 마감: 파이콘 2016 APAC 행사 양일 <strong>오후 2시</strong></li>\n  <li>참가 인원: 선착순 <strong>100명</strong></li>\n  <li>결과 발표: 파이콘 2016 APAC 행사 양일 <strong>오후 5시</strong>(카카오 부스에서 Live!)</li>\n</ul>\n\n<blockquote>\n  <p><img src=\"http://item.kakaocdn.net/do/-26p06+UqCd0OAgiRHNZwHaq4FJCveCBKCNZV-bZscw_/477c52636630bc15b2890bde099cba0a1667fc7b08261b4c493670baa83d5cb9\" class=\"pull-right\" />\n<strong>21세기에 왠 메일?</strong></p>\n\n  <p>애초 계획은 클라우드 서버에 올려서 서버-to-서버 RESTful API를 게임을 진행하는 방식이었지만,\n행사장의 극도로 불안정한 네트웍을 고려하여, 로컬에서 개발하고 동작할 수 있는 지금의 방식으로 변경하였습니다.</p>\n\n  <p>저도 급하게 바꾸느라 죽을 맛이에요 ㅠㅠ</p>\n</blockquote>\n\n<h2 id=\"게임-규칙\">게임 규칙</h2>\n\n<ul>\n  <li><strong>각 라운드별로 정해진 회수</strong>의 가위-바위-보에서 점수를 많이 획득한 플레이어가 승리합니다.</li>\n  <li>예선전: 100회</li>\n  <li>본선 토너먼트(32강, 16강, 8강): 1000회</li>\n  <li>준결승: 5000회</li>\n  <li>결승: 10000회</li>\n  <li>승리는 <strong>3점</strong>, 무승부는 <strong>1점</strong>, 패배는 <strong>0점</strong> 입니다.(주의: 무승부에 점수가 있음!)</li>\n  <li>승자는 <strong>총점</strong> &gt; <strong>다승</strong> &gt; <strong>참가접수시간</strong> 순으로 결정됩니다.</li>\n  <li>예선전은 <strong>풀 리그(full league)</strong> 방식으로 진행됩니다. 즉, 각 참가자는 모든 다른 참가자와 대결합니다.</li>\n  <li>예선전 결과 상위 <strong>32명</strong>이 본선 토너먼트로 진출합니다.(참자가 숫자에 따라 본선 토너먼트 시작 인원이 달라질 수 있습니다)</li>\n  <li>본선은 <strong>토너먼트(tournament)</strong> 방식으로 진행됩니다. 최고 득점자와 최저 득점자가 대결합니다.</li>\n  <li>16강 - 8강 - 준결승 - 결승을 거쳐 우승자가 나올때 까지 게임이 계속됩니다.</li>\n  <li>주의: <strong>제출한 코드</strong>에서 발생하는 오류는 <strong>패배</strong>로 처리됩니다.</li>\n</ul>\n\n<h2 id=\"시상-내역\">시상 내역</h2>\n\n<ul>\n  <li>우승: <strong>큰</strong> 라이언</li>\n  <li>준우승:  캔들 워머</li>\n  <li>3위, 4위: <strong>작은</strong> 라이언</li>\n  <li>예선전 참가자 전원: 카카오프렌즈 목베개</li>\n  <li><strong>8/14변경</strong> 어제(8/13) 참가했더라도 오늘 참가 가능</li>\n  <li><strong>8/14변경</strong> 어제 수령한 상품과 동일한 상품/기념품 수령 불가(다른 상품은 가능)</li>\n  <li>positive: 어제는 32강 오늘은 3위, 어제는 3위 오늘은 우승… 등</li>\n  <li>negative: 어제는 32강 오늘은 8강, 어제는 4위 오늘은 3위… 등</li>\n</ul>\n\n<h2 id=\"요구사항\">요구사항</h2>\n\n<ol>\n  <li><code class=\"highlighter-rouge\">파이썬3</code>을 사용하여, <code class=\"highlighter-rouge\">player.py</code> 파일을 작성합니다.</li>\n  <li><code class=\"highlighter-rouge\">상대 플레이어의 직전까지의 경기 기록</code>을 전달받아</li>\n  <li>가위(<code class=\"highlighter-rouge\">gawi</code>), 바위(<code class=\"highlighter-rouge\">bawi</code>), 보(<code class=\"highlighter-rouge\">bo</code>) 중의 하나를 리턴하는</li>\n  <li>함수 <code class=\"highlighter-rouge\">show_me_the_hand</code>를 작성하세요.</li>\n  <li><strong>8/14변경</strong> 확장 패키지 사용 불가!</li>\n  <li><strong>8/14변경</strong> <code class=\"highlighter-rouge\">random</code> 패키지, <code class=\"highlighter-rouge\">os.urandom()</code> 을 포함한 기본 파이썬 패키지에 포함된 random 사용 불가!</li>\n  <li><strong>8/14변경</strong> 이 홈페이지의 예제와 동일한 코드를 제출하면 실격!</li>\n</ol>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>경기기록 ::= [ (가위바위보, 승무패), ...]\n가위바위보 ::= 'gawi' | 'bawi' | 'bo' ('gawi'=가위, 'bawi'=바위, 'bo'=보)\n승무패 ::= 1 | 0 | -1 (1=승리, 0=무승, -1=패배)\n</code></pre></div></div>\n\n<h3 id=\"예제1-가위-바위-보를-랜덤으로-내는-플레이어\">예제1: 가위, 바위, 보를 <strong>랜덤</strong>으로 내는 플레이어</h3>\n\n<ul>\n  <li><strong>8/14변경</strong> 오늘 이렇게 내면 실격!!!</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">random</span> <span class=\"kn\">import</span> <span class=\"n\">choice</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">show_me_the_hand</span><span class=\"p\">(</span><span class=\"n\">records</span><span class=\"p\">):</span>\n    <span class=\"c\"># 상대방이 지금까지 뭘 냈던 랜덤으로 선택</span>\n    <span class=\"k\">return</span> <span class=\"n\">choice</span><span class=\"p\">([</span><span class=\"s\">'gawi'</span><span class=\"p\">,</span> <span class=\"s\">'bawi'</span><span class=\"p\">,</span> <span class=\"s\">'bo'</span><span class=\"p\">])</span>\n</code></pre></div></div>\n\n<h4 id=\"예제2-최초-한번은-랜덤으로-이후부터는-상대방이-낸-걸-따라내는-플레이어\">예제2: 최초 한번은 <strong>랜덤</strong>으로, 이후부터는 상대방이 낸 걸 <strong>따라</strong>내는 플레이어</h4>\n\n<ul>\n  <li><strong>8/14변경</strong> 오늘 이렇게 내면 실격!!!</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">random</span> <span class=\"kn\">import</span> <span class=\"n\">choice</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">show_me_the_hand</span><span class=\"p\">(</span><span class=\"n\">records</span><span class=\"p\">):</span>\n    <span class=\"c\"># 최초 한번은 랜덤...</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">records</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">choice</span><span class=\"p\">([</span><span class=\"s\">'gawi'</span><span class=\"p\">,</span> <span class=\"s\">'bawi'</span><span class=\"p\">,</span> <span class=\"s\">'bo'</span><span class=\"p\">])</span>\n    <span class=\"c\"># 이후에는 상대방이 낸 걸 따라내는 플레이어</span>\n    <span class=\"k\">return</span> <span class=\"n\">records</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre></div></div>\n\n<h4 id=\"예제3-항상-주먹만-내는-플레이어\">예제3: 항상 <code class=\"highlighter-rouge\">주먹</code>만 내는 플레이어</h4>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">show_me_the_hand</span><span class=\"p\">(</span><span class=\"n\">records</span><span class=\"p\">):</span>\n    <span class=\"c\"># 나는 주먹만 내!!!</span>\n    <span class=\"k\">return</span> <span class=\"s\">'bawi'</span>\n</code></pre></div></div>\n\n<h4 id=\"예제4-가위-바위-보를-돌아가면서-내는-플레이어\">예제4: <code class=\"highlighter-rouge\">가위</code>, <code class=\"highlighter-rouge\">바위</code>, <code class=\"highlighter-rouge\">보</code>를 돌아가면서 내는 플레이어</h4>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">hands</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'gawi'</span><span class=\"p\">,</span> <span class=\"s\">'bawi'</span><span class=\"p\">,</span> <span class=\"s\">'bo'</span><span class=\"p\">]</span>\n<span class=\"n\">my_hand</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">show_me_the_hand</span><span class=\"p\">(</span><span class=\"n\">records</span><span class=\"p\">):</span>\n    <span class=\"n\">my_hand</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">my_hand</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">3</span>\n    <span class=\"k\">return</span> <span class=\"n\">hands</span><span class=\"p\">[</span><span class=\"n\">my_hand</span><span class=\"p\">]</span>\n</code></pre></div></div>\n\n<h4 id=\"테스트-방법pseudo-code\">테스트 방법(pseudo code):</h4>\n\n<ul>\n  <li>이 코드는 참가자의 이해를 돕기위한 pseudo code입니다.</li>\n  <li><strong>8/14변경</strong> 변경된 부분에 주의하세요!</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">player1</span>\n<span class=\"kn\">import</span> <span class=\"nn\">player2</span>\n\n<span class=\"n\">r1</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">r2</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">):</span>\n    <span class=\"n\">h1</span> <span class=\"o\">=</span> <span class=\"n\">player1</span><span class=\"o\">.</span><span class=\"n\">show_me_the_hand</span><span class=\"p\">(</span><span class=\"n\">r2</span><span class=\"p\">)</span>\n    <span class=\"n\">h2</span> <span class=\"o\">=</span> <span class=\"n\">player2</span><span class=\"o\">.</span><span class=\"n\">show_me_the_hand</span><span class=\"p\">(</span><span class=\"n\">r1</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">h1</span> <span class=\"o\">==</span> <span class=\"n\">h2</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'match </span><span class=\"si\">%</span><span class=\"s\">d of 1000: tie'</span> <span class=\"o\">%</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">elif</span> <span class=\"p\">(</span><span class=\"n\">h1</span> <span class=\"o\">==</span> <span class=\"s\">'gawi'</span> <span class=\"ow\">and</span> <span class=\"n\">h2</span> <span class=\"o\">==</span> <span class=\"s\">'bo'</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"n\">h1</span> <span class=\"o\">==</span> <span class=\"s\">'bawi'</span> <span class=\"ow\">and</span> <span class=\"n\">h2</span> <span class=\"o\">==</span> <span class=\"s\">'gawi'</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"n\">h1</span> <span class=\"o\">==</span> <span class=\"s\">'bo'</span> <span class=\"ow\">and</span> <span class=\"n\">h2</span> <span class=\"o\">==</span> <span class=\"s\">'bawi'</span><span class=\"p\">):</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'match </span><span class=\"si\">%</span><span class=\"s\">d of 1000: p1 win'</span> <span class=\"o\">%</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'match </span><span class=\"si\">%</span><span class=\"s\">d of 1000: p2 win'</span> <span class=\"o\">%</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n    <span class=\"n\">r1</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">h1</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">))</span>  <span class=\"c\"># NOTE: 어제와 달라졌습니다!!!</span>\n    <span class=\"n\">r2</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">h2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">r</span><span class=\"p\">))</span>  <span class=\"c\"># NOTE: 어제와 달라졌습니다!!!</span>\n    <span class=\"c\"># blah blah ...</span>\n</code></pre></div></div>\n\n<hr />\n\n<p><a href=\"http://tech.kakao.com/2016/08/19/gawibawibo/\">CODING BATTLE 가위바위보! - 못다한 이야기</a> 참조</p>\n"
  }
    
  
    
  
    
  
    
  
    
  
    
  
    
  
]
